/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as CertificatesRouteImport } from './routes/certificates'
import { Route as CasRouteImport } from './routes/cas'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CertificatesNewRouteImport } from './routes/certificates.new'
import { Route as CertificatesBulkRouteImport } from './routes/certificates.bulk'
import { Route as CertificatesIdRouteImport } from './routes/certificates.$id'
import { Route as CasNewRouteImport } from './routes/cas.new'
import { Route as CasIdRouteImport } from './routes/cas.$id'

const CertificatesRoute = CertificatesRouteImport.update({
  id: '/certificates',
  path: '/certificates',
  getParentRoute: () => rootRouteImport,
} as any)
const CasRoute = CasRouteImport.update({
  id: '/cas',
  path: '/cas',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CertificatesNewRoute = CertificatesNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => CertificatesRoute,
} as any)
const CertificatesBulkRoute = CertificatesBulkRouteImport.update({
  id: '/bulk',
  path: '/bulk',
  getParentRoute: () => CertificatesRoute,
} as any)
const CertificatesIdRoute = CertificatesIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => CertificatesRoute,
} as any)
const CasNewRoute = CasNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => CasRoute,
} as any)
const CasIdRoute = CasIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => CasRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cas': typeof CasRouteWithChildren
  '/certificates': typeof CertificatesRouteWithChildren
  '/cas/$id': typeof CasIdRoute
  '/cas/new': typeof CasNewRoute
  '/certificates/$id': typeof CertificatesIdRoute
  '/certificates/bulk': typeof CertificatesBulkRoute
  '/certificates/new': typeof CertificatesNewRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cas': typeof CasRouteWithChildren
  '/certificates': typeof CertificatesRouteWithChildren
  '/cas/$id': typeof CasIdRoute
  '/cas/new': typeof CasNewRoute
  '/certificates/$id': typeof CertificatesIdRoute
  '/certificates/bulk': typeof CertificatesBulkRoute
  '/certificates/new': typeof CertificatesNewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cas': typeof CasRouteWithChildren
  '/certificates': typeof CertificatesRouteWithChildren
  '/cas/$id': typeof CasIdRoute
  '/cas/new': typeof CasNewRoute
  '/certificates/$id': typeof CertificatesIdRoute
  '/certificates/bulk': typeof CertificatesBulkRoute
  '/certificates/new': typeof CertificatesNewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cas'
    | '/certificates'
    | '/cas/$id'
    | '/cas/new'
    | '/certificates/$id'
    | '/certificates/bulk'
    | '/certificates/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cas'
    | '/certificates'
    | '/cas/$id'
    | '/cas/new'
    | '/certificates/$id'
    | '/certificates/bulk'
    | '/certificates/new'
  id:
    | '__root__'
    | '/'
    | '/cas'
    | '/certificates'
    | '/cas/$id'
    | '/cas/new'
    | '/certificates/$id'
    | '/certificates/bulk'
    | '/certificates/new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CasRoute: typeof CasRouteWithChildren
  CertificatesRoute: typeof CertificatesRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/certificates': {
      id: '/certificates'
      path: '/certificates'
      fullPath: '/certificates'
      preLoaderRoute: typeof CertificatesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cas': {
      id: '/cas'
      path: '/cas'
      fullPath: '/cas'
      preLoaderRoute: typeof CasRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/certificates/new': {
      id: '/certificates/new'
      path: '/new'
      fullPath: '/certificates/new'
      preLoaderRoute: typeof CertificatesNewRouteImport
      parentRoute: typeof CertificatesRoute
    }
    '/certificates/bulk': {
      id: '/certificates/bulk'
      path: '/bulk'
      fullPath: '/certificates/bulk'
      preLoaderRoute: typeof CertificatesBulkRouteImport
      parentRoute: typeof CertificatesRoute
    }
    '/certificates/$id': {
      id: '/certificates/$id'
      path: '/$id'
      fullPath: '/certificates/$id'
      preLoaderRoute: typeof CertificatesIdRouteImport
      parentRoute: typeof CertificatesRoute
    }
    '/cas/new': {
      id: '/cas/new'
      path: '/new'
      fullPath: '/cas/new'
      preLoaderRoute: typeof CasNewRouteImport
      parentRoute: typeof CasRoute
    }
    '/cas/$id': {
      id: '/cas/$id'
      path: '/$id'
      fullPath: '/cas/$id'
      preLoaderRoute: typeof CasIdRouteImport
      parentRoute: typeof CasRoute
    }
  }
}

interface CasRouteChildren {
  CasIdRoute: typeof CasIdRoute
  CasNewRoute: typeof CasNewRoute
}

const CasRouteChildren: CasRouteChildren = {
  CasIdRoute: CasIdRoute,
  CasNewRoute: CasNewRoute,
}

const CasRouteWithChildren = CasRoute._addFileChildren(CasRouteChildren)

interface CertificatesRouteChildren {
  CertificatesIdRoute: typeof CertificatesIdRoute
  CertificatesBulkRoute: typeof CertificatesBulkRoute
  CertificatesNewRoute: typeof CertificatesNewRoute
}

const CertificatesRouteChildren: CertificatesRouteChildren = {
  CertificatesIdRoute: CertificatesIdRoute,
  CertificatesBulkRoute: CertificatesBulkRoute,
  CertificatesNewRoute: CertificatesNewRoute,
}

const CertificatesRouteWithChildren = CertificatesRoute._addFileChildren(
  CertificatesRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CasRoute: CasRouteWithChildren,
  CertificatesRoute: CertificatesRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
